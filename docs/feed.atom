<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<link rel="self" href="https://blog.awaitwisdom.com/" />
	<id>https://blog.awaitwisdom.com/</id>
	<title>await Wisdom()</title>
	<rights>2017</rights>
	<updated>2017-02-15T06:07:55Z</updated>
	<logo>https://blog.awaitwisdom.com/assets/img/Cursor.jpg</logo>
	<subtitle>await Wisdom()</subtitle>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/wifi-with-unifi" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/wifi-with-unifi</id>
		<title>WiFi with UniFi</title>
		<updated>2016-04-02T15:00:00Z</updated>
		<content>&lt;p&gt;I have had a Netgear WNR3000L Wireless Router for several years and it was starting to have some issues. The wireless network would just disappear several times a day, and rebooting the router was the only fix.  That router is open-source capable, so I'd tried the DD-WRT and TomatoWRT firmwares in addition to the stock image. Switching the image didn't seem to help, so I suspect there was some failing hardware inside.&lt;/p&gt;
&lt;p&gt;My modem is in a corner of the basement where the cable enters the house. I didn't want the WiFi access point there, so I have a little Cisco RV180 as my router/DHCP/firewall and the Netgear was in AP-only mode upstairs in the guest bedroom.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2016/Apr/wnr3000L.png" class="img-fluid" alt="WNR3000L"&gt;&lt;img src="../assets/img/2016/Apr/cisco_rv180.png" class="img-fluid" alt="RV180"&gt;&lt;/p&gt;
&lt;p&gt;I was kind of passively looking for a replacement when I happened upon &lt;a href="http://arstechnica.com/gadgets/2015/10/review-ubiquiti-unifi-made-me-realize-how-terrible-consumer-wi-fi-gear-is/1/"&gt;this article&lt;/a&gt;, which was the first I'd heard of &lt;a href="https://www.ubnt.com/"&gt;Ubiquiti&lt;/a&gt; and the &lt;a href="https://www.ubnt.com/unifi/unifi-ac/"&gt;UniFi&lt;/a&gt; products. I picked up the &lt;a href="https://www.ubnt.com/unifi/unifi-ap-ac-lr/"&gt;Long-Range flavor&lt;/a&gt;, primarily because the Pro’s were out of stock, the LR's were cheaper, and they met my needs for now.&lt;/p&gt;
&lt;p&gt;The AP supports Power over Ethernet and comes with a PoE injector.  I put the PoE injector downstairs with the router, and the AP is upstairs under a dresser, happily powered with just the PoE.
&lt;img src="../assets/img/2016/Apr/blueglow.png" class="img-fluid" alt="blue glow"&gt;&lt;/p&gt;
&lt;p&gt;Although it isn’t strictly needed, I did go ahead and setup the Unifi Controller, which I’ve got living in Azure. Setting that up could be the subject of a future post. A couple screenshots from my controller dashboard are below.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Connected clients&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2016/Apr/clients.png" class="img-fluid" alt="connected clients"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Nearby networks&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2016/Apr/survey.png" class="img-fluid" alt="nearby networks"&gt;&lt;/p&gt;
&lt;p&gt;Replacing the old WiFi was pretty easy, but the access point is more than just a drop in replacement. It was also easy to set up an isolated guest wireless network. The AC speed is pretty nice too.  If I find that I need better coverage or capacity, adding a new access point is trivial. I'll just need to plug it in and point it at the controller. It will connect and the controller will push my configuration down to the AP.&lt;/p&gt;
&lt;p&gt;I’m loving the setup. It's been rock solid so far. I’ll probably replace my Cisco RV180 (which is also starting to show age) with a &lt;a href="https://www.ubnt.com/unifi-switching-routing/usg/"&gt;UniFi Security Gateway&lt;/a&gt; in the near-ish future.&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/ghost-converter" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/ghost-converter</id>
		<title>Ghost Converter</title>
		<updated>2016-03-23T11:00:00Z</updated>
		<content>&lt;p&gt;Part of migrating to a new system is migrating data/content from the old. This is a quick "How to" post documenting how I exported old posts from my outdated &lt;a href="https://github.com/TryGhost/Ghost"&gt;Ghost blog&lt;/a&gt; for import into my current &lt;a href="http://wyam.io/"&gt;Wyam&lt;/a&gt;-based blog.&lt;/p&gt;
&lt;h2 id="part-1-the-content"&gt;Part 1: The Content&lt;/h2&gt;
&lt;p&gt;The content was simple. FTP to my blog instance and download the folder of images. Put those images in the new blog folder. Ghost organized images in a simple "Year/Month/Filename" folder structure, which I kept.&lt;/p&gt;
&lt;h2 id="part-2-the-data"&gt;Part 2: The Data&lt;/h2&gt;
&lt;p&gt;The exact path to get to the data export options in Ghost has changed as the project has matured. For my admittedly outdated instance, it was accessible via a "hidden" URL. This allowed meto download a &lt;code&gt;.json&lt;/code&gt; file, which was reasonably structured. &lt;img src="../assets/img/2016/Mar/ghost-export-json.png" class="img-fluid" alt="Json Structure"&gt;&lt;/p&gt;
&lt;p&gt;A lot of that information wasn't relevant to me, as a small, single-user blog user. My areas of interest were the &lt;code&gt;posts&lt;/code&gt; and &lt;code&gt;tags&lt;/code&gt; arrays.&lt;/p&gt;
&lt;p&gt;Each object in &lt;code&gt;posts&lt;/code&gt; has the following interesting properties (some weren't relevant to me&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    "title": "Publishing Web Site Projects",
    "slug": "publishing-website-projects",
    "markdown": "&amp;lt;snipped&amp;gt;", // User input Markdown
    "html": "&amp;lt;snipped&amp;gt;", // HTML output generated from Markdown 
    "status": "published",
    "published_at": 1393627986715,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The only property from the &lt;code&gt;tags&lt;/code&gt; entries useful to me was a &lt;code&gt;name&lt;/code&gt;, and each post is linked to zero or more tags via the &lt;code&gt;posts_tags&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;I needed individual Markdown files for each post, with the metadata intact. Wyam uses a &lt;a href="http://yaml.org/"&gt;YAML&lt;/a&gt; file header (or Frontmatter) for metadata, followed by the body of post.&lt;/p&gt;
&lt;p&gt;I made a quick console application to do this for me, which is available on &lt;a href="https://github.com/jcgillespie/GhostConverter"&gt;GitHub&lt;/a&gt;. It is very rudimentary, but did the job for me, more or less.&lt;/p&gt;
&lt;h2 id="part-3-cleanup"&gt;Part 3: Cleanup&lt;/h2&gt;
&lt;p&gt;The "less" part of "more or less" is all the various small cleanup tasks I've done since then. They include things like adding a "Migrated" tag to all the legacy post files, correcting broken image links, adding some CSS classes to make the images responsive to smaller screen sizes, etc.  For these simple mass edits, I've just used &lt;a href="https://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/a-new-stack" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/a-new-stack</id>
		<title>A New Stack</title>
		<updated>2016-03-19T15:00:00Z</updated>
		<content>&lt;h4 id="teaching-an-old-blog-a-new-stack"&gt;Teaching an old blog a new stack&lt;/h4&gt;
&lt;p&gt;After messing around with the Ghost blog engine and Node.js, I knew I wanted a new technology stack. My daily work is typically in .NET, so that was preferrable. Playing with and learning Node.js was fine, but I found that having the learning curve between me and writing kept me from writing.&lt;/p&gt;
&lt;p&gt;I was intrigued by the concept of a static website. I looked at Jekyl, and Octopress, which introduced me to the static workflow and GitHub Pages hosting. In the end, their Windows environment support wasn't great and it I still preferred to find something in the .NET framework.&lt;/p&gt;
&lt;p&gt;So my list of requirements was pretty small.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.NET framework based&lt;/li&gt;
&lt;li&gt;Static website&lt;/li&gt;
&lt;li&gt;Supports blogging in &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Easy to learn/use&lt;/li&gt;
&lt;li&gt;Fun to play with&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eventually, I found &lt;a href="http://wyam.io/"&gt;Wyam&lt;/a&gt;. Wyam is capable of a lot more than just blogging, but it checked all the right boxes.  Setup was pretty straightforward, and working locally is simple.&lt;/p&gt;
&lt;p&gt;I commit posts to my &lt;a href="https://github.com/jcgillespie/awaitWisdom"&gt;GitHub repo&lt;/a&gt;, &lt;a href="http://www.appveyor.com/"&gt;AppVeyor&lt;/a&gt; sees that commit, pulls down the latest release of Wyam, generates the static files, and commits the results to the &lt;code&gt;gh-pages&lt;/code&gt; branch, which &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; hosts for me (free!)&lt;/p&gt;
&lt;p&gt;Still very much a work in progress, but I'm having fun blogging again. See a typo? Send me a pull request. Feel free to suggest features or submit bugs too.  All the code is licensed under a &lt;a href="https://opensource.org/licenses/MIT"&gt;MIT License&lt;/a&gt; and content is available as a &lt;a href="http://creativecommons.org/licenses/by/4.0/deed.en_US"&gt;Creative Commons attribution license&lt;/a&gt;.&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/reboot" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/reboot</id>
		<title>Reboot MVP</title>
		<updated>2016-03-12T12:00:00Z</updated>
		<content>&lt;h4 id="reboot-mvp"&gt;Reboot MVP&lt;/h4&gt;
&lt;p&gt;I've wanted to resume blogging again for some time now, but there was something standing in my way: my current blog.&lt;/p&gt;
&lt;p&gt;When I started blogging, I wanted to use my blog as an exercise to learn and flex programming muscles I hadn't been using much. To that end, I started by using &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt;, which was fresh out of a successful Kickstarter. I wanted to see what all the hype surrounding Node.js was about, and the blog looked pretty sweet, so I decided to give it a shot. I made matters more complicated by hosting the blog in Azure, which was just starting to support Node.js at that time.&lt;/p&gt;
&lt;p&gt;I enjoyed blogging, but I didn't enjoy all maintenance pains I encountered with my chosen setup. To make a long story shorter, it isn't a coincidence that I stopped blogging shortly after Ghost released 0.5.1. I had trouble applying the upgrade and lost interest. I wanted to write and instead created a chore.&lt;/p&gt;
&lt;p&gt;After several half-hearted attempts to reboot, I've finally found the drive and the time to start building something new. I'm a slow learner, as I'm still using the blog as an opportunity to learn new things in addition to writing, but at least I'm learning, right?&lt;/p&gt;
&lt;p&gt;I'm also using this chance to fight my own inclinations and instead practice what I preach by launching an imperfect, in progress blog. Rather than wait (probably forever) until I have a perfect site, I'll launch the bare minimum and iterate.  This post is the &lt;a href="https://en.wikipedia.org/wiki/Minimum_viable_product"&gt;Minimum Viable Product&lt;/a&gt;. The style is still ugly and there is functionality missing, but if you're reading this then I've done enough to launch.&lt;/p&gt;
&lt;p&gt;I think imperfect and improving is better than the dead blog it replaces. Check back for progress!&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/how-to-extend-tfs-team-web-access" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/how-to-extend-tfs-team-web-access</id>
		<title>How to Extend TFS Team Web Access</title>
		<updated>2014-09-02T07:50:57Z</updated>
		<content>&lt;p&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ee523998.aspx"&gt;TFS Team Web Access (TWA)&lt;/a&gt; is a great tool for low-friction access to the development process. It has improved by leaps and bounds in the last few releases, but what if you want even more? Maybe you've seen vendors with products that augment TWA and wondered how you can do it yourself. Or maybe you're like me and just like to tinker for curiosity's sake.&lt;/p&gt;
&lt;p&gt;Clients often ask if they can customize/extend TWA and the short answer is "It isn't supported". But if you &lt;em&gt;really&lt;/em&gt; want to extend TWA, the slightly longer answer is "Yes, but it isn't supported." Here's how you do exactly that.&lt;/p&gt;
&lt;h2 id="objective"&gt;Objective&lt;/h2&gt;
&lt;p&gt;We're going to add custom code to the TFS Team Web Access application and extend it with whatever we want.&lt;/p&gt;
&lt;p&gt;Taking this
&lt;img src="../assets/img/2014/Aug/before.PNG" class="img-fluid" alt="Before"&gt;
And adding a tab of our own.
&lt;img src="../assets/img/2014/Aug/After.PNG" class="img-fluid" alt="After"&gt;&lt;/p&gt;
&lt;h2 id="warning"&gt;Warning&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;I'm not kidding. This really isn't supported. If you wreck your server trying this, Microsoft isn't going to help you. What follows is provided "as is" with no warranty from a random guy on the internet.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is unsupported because it uses undocumented extension APIs in TWA. Undocumented/unsupported means Microsoft can change them at any time. Clearly, they've done some prep work for this, but evidently aren't ready to support it yet. Documenting (and thus supporting) the extension API is currently the &lt;a href="http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/3352200-provide-api-documentation-for-the-customization-of"&gt;9th most popular TFS request on User Voice&lt;/a&gt;. The product team hasn't weighed in on it and it dates back to November of 2012, so I wouldn't hold my breath. If they change the APIs, this may all suddenly stop working.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/WarrantyVoid.jpg" class="img-fluid" alt="Warranty Void"&gt;
With that out of the way, let's get started!&lt;/p&gt;
&lt;h2 id="what-youll-need"&gt;What you'll need&lt;/h2&gt;
&lt;p&gt;You will need admin access to an instance of Team Foundation Server. Please use common sense and don't use your production server. These instructions are for TFS 2013 and were tested against both update 2 and 3 (2013.2 &amp;amp; 2013.3).&lt;/p&gt;
&lt;p&gt;You'll need the code editor of your choice. I'm using Visual Studio 2013. Use whatever you like.&lt;/p&gt;
&lt;h2 id="step-1-create-the-the-empty-web-app"&gt;Step 1: Create the the empty web app&lt;/h2&gt;
&lt;p&gt;First we need to create a solution that mimics/mocks the structure of TWA. Create an empty .NET 4.5 Web Application Project. Versions are very important throughout this process. For TFS 2013, make sure you select .NET 4.5, not 3.5 or 4.5.1, or anything else.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/FileNewProject.png" class="img-fluid" alt="File-&gt;New Project"&gt;
Update the web.config so it looks like the following:
&lt;img src="../assets/img/2014/Aug/web-config.png" class="img-fluid" alt="web.config"&gt;
Or for the copy/paste inclined:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version="1.0"?&amp;gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;appSettings&amp;gt;
    &amp;lt;add key="webpages:Version" value="2.0.0.0"/&amp;gt;
  &amp;lt;/appSettings&amp;gt;
  &amp;lt;system.web&amp;gt;
    &amp;lt;compilation debug="true" targetFramework="4.5"/&amp;gt;
    &amp;lt;httpRuntime/&amp;gt;
    &amp;lt;pages controlRenderingCompatibilityVersion="4.0"/&amp;gt;
 &amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is mostly to assist Intellisense while you're coding, because the next step is to ensure this file is never deployed.
View the Properties dialog for the web.config and set the Build action to "None". "Copy to Output Directory" should already be set to "Do not copy", but double check and make sure. We don't want to overwrite the web.config that is already on the server.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/Web-config-properties.png" class="img-fluid" alt="web.config properties"&gt;&lt;/p&gt;
&lt;h2 id="step-2-make-the-empty-project-more-empty"&gt;Step 2: Make the empty project more empty&lt;/h2&gt;
&lt;p&gt;If you have any web.config transforms, remove them. Again, we're not deploying the web.config, so these transforms won't do us any good.&lt;/p&gt;
&lt;p&gt;Next we remove almost all the references that are added to the project by default. Leave in Microsoft.CSharp, System, System.Core, and System.Web.&lt;/p&gt;
&lt;p&gt;When this is all said and done, you should have a very empty, very stripped down Web Application. Here's what mine looks like.
&lt;img src="../assets/img/2014/Aug/SolutionStart.png" class="img-fluid" alt="Starting Solution Explorer"&gt;&lt;/p&gt;
&lt;h2 id="step-3-add-in-mvc"&gt;Step 3: Add in MVC&lt;/h2&gt;
&lt;p&gt;Now we can start adding to the app. This needs to match what is in the TFS application. For TFS 2013, install last version of MVC 4. I'm using NuGet, but you can do this manually if you'd rather.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Install-Package Microsoft.AspNet.Mvc -Version 4.0.30506 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Again, because these are already in TFS, we don't want to overwrite them when we deploy. Go to the property view for each added reference and set the "Copy Local" to false.
&lt;img src="../assets/img/2014/Aug/mvc-properties.png" class="img-fluid" alt=""&gt;
At this point, none of the references in the solution should be set to Copy Local. If you build the solution and check the &lt;code&gt;/bin/&lt;/code&gt; directory, it shouldn't have anything but the project dll and pdb file.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;For me, Visual Studio actually outputs the web.config Contents to the &lt;code&gt;/bin/&lt;/code&gt; as an &lt;appname&gt;.dll.config file, but MSBuild doesn't. I have no idea why this is, but &lt;a href="http://stackoverflow.com/q/21070675/55142"&gt;I'm not the only one&lt;/a&gt;&lt;/appname&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="step-4-copy-the-tfs-master-pages"&gt;Step 4: Copy the TFS Master pages&lt;/h2&gt;
&lt;p&gt;Next we'll pull the TFS master pages into the application so we can reference them. Add a &lt;code&gt;_views&lt;/code&gt; folder to the root of the application. This matches the structure of the TFS application.&lt;/p&gt;
&lt;p&gt;Now connect and to your TFS server and browse to the install directory. For me, this was &lt;code&gt;C:\Program Files\Microsoft Team Foundation Server 12.0\&lt;/code&gt;. Navigate to the &lt;code&gt;\Application Tier\Web Services\_views\&lt;/code&gt; subdirectory and decide which master pages you want to use for your customizations. Copy those into your application, maintaining whatever folder structure they had in TFS. Make sure you get the hierarchy of master pages. Some of them use others.&lt;/p&gt;
&lt;p&gt;I chose to use &lt;code&gt;\Shared\Masters\HubPage.master&lt;/code&gt; which references  &lt;code&gt;\Shared\Main.master&lt;/code&gt;, so I copied those two.
&lt;img src="../assets/img/2014/Aug/added-masters.png" class="img-fluid" alt="Added Masters"&gt;
Once again, we don't want to include this in the deployment, so set the "Build Action" to "None" and "Copy to output directory" to "false".&lt;/p&gt;
&lt;p&gt;The TWA master pages derive from a custom base class &lt;code&gt;TfsViewMasterPage&lt;/code&gt;, so we'll need to grab a couple DLLs for this to compile. Go back to your TFS install directory  and grab a copy of the following DLLs from the &lt;code&gt;\Application Tier\Web Services\bin&lt;/code&gt; folder.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft.TeamFoundation.Server.WebAccess.dll&lt;/li&gt;
&lt;li&gt;Microsoft.TeamFoundation.Server.WebAccess.Platform.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add these to your solution and reference them in your project. Once again, ensure they are not copied to the output directory.&lt;/p&gt;
&lt;h2 id="checkpoint"&gt;Checkpoint&lt;/h2&gt;
&lt;p&gt;So far, we've created a pretty empty web application project that mimics the TWA. Building the solution outputs an empty DLL and nothing else. This is the foundation of our extension. From here on out, we'll start adding code that gets deployed. If you're working with source control, now is a great time to check in. If you wanted to create a Visual Studio project template, this would be a good place to do that too. I've added a few housekeeping things and checked my solution in. This is what my Solution looks like now.
&lt;img src="../assets/img/2014/Aug/Initial-Checkin.png" class="img-fluid" alt="initial checkin"&gt;&lt;/p&gt;
&lt;h2 id="step-5-start-extending"&gt;Step 5: Start Extending!&lt;/h2&gt;
&lt;p&gt;The organization of your customizations isn't critical like it was for previous steps, though you probably don't want to stomp on other TWA files. I like to keep my customizations very cleanly away from everything TWA related, so I'm going to create an MVC Area for my customization.
&lt;img src="../assets/img/2014/Aug/custom-area.png" class="img-fluid" alt="Custom area"&gt;&lt;/p&gt;
&lt;p&gt;Warning: TWA requires that all controllers have unique names. If you pick a name that collides with another controller, you'll get a exception like&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;Multiple MVC controllers found with name 'HomeController'.
Web Access uses generic routes (for all controllers) that do provide namespace constraints for controller do not have a controller namespace constraint, so this check enforces unique controller names to make sure selection. So we do this controller-name-uniqueness check upfront to fail fast and avoid bugs caused by issues during runtime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;That's right, the default controller isn't a unique name, so give it a new one. I just called mine &lt;code&gt;CustomHomeController&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Because TWA uses a custom ViewEngine with non-standard view locations, it won't find our view in the usual location. We do have a few options though.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put our views in with the built-in views (&lt;code&gt;\_views\&lt;/code&gt;) folder. No, thank you. This ups the risk of stepping on the TWA functionality or being stepped on in updates.&lt;/li&gt;
&lt;li&gt;Pull our views out of the Area folder and put them in the usual root &lt;code&gt;\Views\&lt;/code&gt; folder. This is a little better, but I much prefer areas to keep the app cleanly organized.&lt;/li&gt;
&lt;li&gt;Specify the views with fully qualified paths. This is what I'm doing for now.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is another option that is pretty slick, but it takes us deeper into unsupported territory. I'll try to blog about that one in the future.&lt;/p&gt;
&lt;p&gt;The Controller, Model, and View are all standard and simple. I'm just creating a method that echos the user input.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/Custom-ViewModel.PNG" class="img-fluid" alt="model"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/custom-view.png" class="img-fluid" alt="view"&gt;
Note that the view is using the master page we copied in. For this master, I want to put my Content in the "HubContent" placeholder.&lt;/p&gt;
&lt;p&gt;Because we're using the TWA master, our controller has another constraint. Remember the master page derives from a custom base class. That base class expects some objects to be initialized and populated, so instead of deriving from &lt;code&gt;System.Web.Mvc.Controller&lt;/code&gt;, we need to derive from &lt;code&gt;Microsoft.TeamFoundation.Server.WebAccess.TfsAreaController&lt;/code&gt;. The &lt;code&gt;TfsAreaController&lt;/code&gt; will handle the objects the master pages expect. If you skip deriving from that class, you'll end up with a vague &lt;code&gt;NullReferenceException&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Change the base class and implement the members it requires. Here's my controller. I'm made the Area name a constant and resused it here.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/Custom-Controller.png" class="img-fluid" alt="controller"&gt;&lt;/p&gt;
&lt;h2 id="step-6-wire-it-up"&gt;Step 6: Wire it up&lt;/h2&gt;
&lt;p&gt;If you were to deploy this right now, nothing would happen. The TWA app handles routing differently than the usual MVC setup. The routing is a little more dynamic, which allows the same component to work at different "levels" of TFS whilst maintaining a REST-ful URL. For example, your customization might be useful at the Project Collection and Team Project level.&lt;/p&gt;
&lt;p&gt;The navigation is organized into Hub Groups and Hubs. In the image below, items in the red box represent Hub Groups and the items in the green box are Navigation Hubs. MVC Routes are generated based on the setup of the registered navigation hubs. A single component could have a number of routes, all of which are generated and registered by the TWA app.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/Twa-Nav.PNG" class="img-fluid" alt="TWA Navigation"&gt;
We need to register our extension into this navigation system. Open the Area Registration class. You can zap the default route registration that shows up there. TWA will ignore it anyway.&lt;/p&gt;
&lt;p&gt;We need to create and register a &lt;code&gt;NavigationHub&lt;/code&gt;. I added a private static &lt;code&gt;CreateHub()&lt;/code&gt; method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private static NavigationHub CreateHub()
{
    var customHub = new NavigationHub();
    return customHub;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and registered it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public override void RegisterArea(AreaRegistrationContext context)
{
   var hub = CustomNavigationHubFactory.Create();
   NavigationTable.Hubs.Add(hub);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That creates an empty hub and registers it. So now we need to configure the hub. Looking at the properties on the &lt;code&gt;NavigationHub&lt;/code&gt; class, the first thing we want to set is the &lt;code&gt;NavigationLevels&lt;/code&gt;. Let's make our extension available at the Project and Team levels. This controls when the NavigationHub is displayed in the TWA menu. It does NOT control accessibility of the components, which we'll get to a little later.&lt;/p&gt;
&lt;p&gt;The other property we want right now is the &lt;code&gt;QueryStatusCallback&lt;/code&gt;. This callback allows us to provide TWA with the links and display details for our custom &lt;code&gt;NavigationHub&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/QueryStatusCallback.PNG" class="img-fluid" alt="QueryStatusCallback"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Getting the route for the current request context. This will change based on the Navigation Level.&lt;/li&gt;
&lt;li&gt;Building the a link to the Action we want to execute.&lt;/li&gt;
&lt;li&gt;Checking if the NavigationHub is currently selected.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last thing we need to do before deployment is decorating the controller with an attribute that controls the accessibility of the component. This is typically going to be the same as the &lt;code&gt;NavigationHub.NavigationLevels&lt;/code&gt; property, but it doesn't have to be. We'll make it easy to keep them in sync.&lt;/p&gt;
&lt;p&gt;On the AreaRegistration class, I refactored the NavigationLevels I set on the CreateHub method into a public constant.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public const NavigationContextLevels CustomAreaLevels = NavigationContextLevels.Project | NavigationContextLevels.Team;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then I decorated the controller with the &lt;code&gt;SupportedRouteArea&lt;/code&gt; attribute.
&lt;img src="../assets/img/2014/Aug/Decorated-Controller.PNG" class="img-fluid" alt="decorated controller "&gt;&lt;/p&gt;
&lt;h2 id="step-7-deploy-it"&gt;Step 7: Deploy it!&lt;/h2&gt;
&lt;p&gt;I recommend deploying to some folder and inspecting carefully before just pushing this onto your server, so let's setup a publish profile for that. (If you're new to publish profiles, check out my &lt;a href="http://awaitwisdom.com/intro-to-web-publish-profiles/"&gt;intro&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Create a new publish profile that points to a folder.
&lt;img src="../assets/img/2014/Aug/publish-local-folder.PNG" class="img-fluid" alt="local publish profile"&gt;&lt;/p&gt;
&lt;p&gt;Click Publish and go look at the output. It should be really sparse. A &lt;code&gt;/bin/&lt;/code&gt; folder with just the one DLL and the &lt;code&gt;/Areas/&lt;/code&gt; folder with our custom views. If there is anything else in there, go double-check the properties and make sure they are right.  Once the output is looking good, you can either copy the output to your TFS install directory or setup another publish profile.&lt;/p&gt;
&lt;p&gt;If you're copying or using a file system type publish method, the target folder is the &lt;code&gt;Application Tier\Web Service\&lt;/code&gt; folder under the TFS install directory. For me, that is &lt;code&gt;C:\Program Files\Microsoft Team Foundation Server 12.0\Application Tier\Web Services&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You may need to go to IIS manager and restart the TFS Web app for it to pick up the changes.&lt;/p&gt;
&lt;p&gt;Now browse to your instance of TWA.
&lt;img src="../assets/img/2014/Aug/TWA-TPC.PNG" class="img-fluid" alt="Team Project Collection"&gt;
Nothing shows, but that's okay because registered our extension at the Team and Project level and this is the collection level. Browse to a Team Project.
&lt;img src="../assets/img/2014/Aug/TWA-TP.PNG" class="img-fluid" alt="Team Project"&gt;
That's looking better.&lt;/p&gt;
&lt;p&gt;Now click on the extension
&lt;img src="../assets/img/2014/Aug/TWA-Extension.PNG" class="img-fluid" alt="Bingo!"&gt;
Bingo!&lt;/p&gt;
&lt;p&gt;And you still get the goodness of MVC Model Binding. My method was an Echo service accepting a message. If I add &lt;code&gt;?message=Hello&lt;/code&gt; to the URL, it'll be picked up by the Controller and handed to the View via the Model.
&lt;img src="../assets/img/2014/Aug/TWA-Extension-message.PNG" class="img-fluid" alt="Echo"&gt;&lt;/p&gt;
&lt;p&gt;And there you have it! That's how you get started extending TFS Team Web Access.&lt;/p&gt;
&lt;p&gt;The sample solution is available on &lt;a href="https://github.com/jcgillespie/Demos/tree/master/TeamWebAccess"&gt;GitHub&lt;/a&gt;. Discuss on &lt;a href="https://news.ycombinator.com/item?id=8257204"&gt;Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="references"&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/ee523998.aspx"&gt;MSDN: Working with Team Web Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/3352200-provide-api-documentation-for-the-customization-of"&gt;User Voice: Provide API documentation for the customization of TFS Web Access 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/q/21070675/55142"&gt;StackOverflow: Visual Studio copies .config to bin on build, but MSBuild doesnot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hanselman.com/blog/MixingRazorViewsAndWebFormsMasterPagesWithASPNETMVC3.aspx"&gt;Scott Hanselman: Mixing Razor Views and Web Forms Master pages with ASP&amp;gt;NET MVC3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eworldui.net/blog/post/2011/01/07/Using-Razor-Pages-with-WebForms-Master-Pages.aspx"&gt;Matt Hawley: Using Razor Pages with WebForms Master Pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/intro-to-web-publish-profiles/"&gt;await wisdom: A quick introduction to web publish profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/jcgillespie/Demos/tree/master/TeamWebAccess"&gt;GitHub: Sample solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=8257204"&gt;Hacker News: Discussion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="credits"&gt;Credits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flic.kr/p/5SWkC9"&gt;Image Credit: Eirik Solheim&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/stldodn-2014" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/stldodn-2014</id>
		<title>St. Louis Days of .NET 2014</title>
		<updated>2014-08-28T14:19:31Z</updated>
		<content>&lt;p&gt;It's that time of year again! With kids back in school and the Labor Day weekend approaching, summer is effectively over and the St. Louis Days of .NET (STLDODN) conference is approaching once again!&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Aug/stldodn.png" class="img-fluid" alt="STLDODN logo"&gt;
&lt;a href="http://polarissolutions.com/"&gt;Polaris Solutions&lt;/a&gt; is once again a sponsor and several of us will be presenting.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tfswhisperer.com"&gt;Angela Dugan&lt;/a&gt; is back again this year with two talks: &lt;a href="http://stldodn.com/2014/Sessions/33"&gt;Attaining Organizational Agility on a Shoestring&lt;/a&gt; and &lt;a href="http://stldodn.com/2014/Sessions/34"&gt;Structuring your Team Foundation Server for the Long Haul&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.notsotrivial.net/blog/"&gt;Clint Edmonson&lt;/a&gt; will be back as well with two sessions: &lt;a href="http://stldodn.com/2014/Sessions/2"&gt;Application Architecture Jumpstart&lt;/a&gt; and &lt;a href="http://stldodn.com/2014/Sessions/1"&gt;Advanced OOP - Laws, Principles, Idioms&lt;/a&gt;. I caught his OOP talk last year and it was great. Even experienced devs are guaranteed to learn something new or re-learn something they forgot.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.oneluckidev.com/"&gt;Jeff Przylucki&lt;/a&gt; will make his STLDODN debut this year with a presentation on &lt;a href="http://stldodn.com/2014/Sessions/223"&gt;TFS Team Project Consolidation and Migration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And I have the honor of presenting two sessions again this year. I'll be talking about all the new ASP.NET Identity features in &lt;a href="http://stldodn.com/2014/Sessions/150"&gt;Who are you? Digging into ASP.NET Identity&lt;/a&gt;. I'm also excited to present &lt;a href="http://stldodn.com/2014/Sessions/151"&gt;Teaching the Cloud to Think&lt;/a&gt;, which is an intro to machine learning and the new Azure Machine Learning offering.&lt;/p&gt;
&lt;p&gt;Registration for STLDODN isn't open yet, but be sure to watch for it to open. The conference has sold out the last few years. Be sure to check out all the other &lt;a href="http://stldodn.com/2014/Sessions"&gt;sessions&lt;/a&gt; and &lt;a href="http://stldodn.com/2014/Precompilers"&gt;precompilers&lt;/a&gt;. There's a lot of awesome content on the agenda!&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/why-alm-matters" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/why-alm-matters</id>
		<title>Why ALM Matters</title>
		<updated>2014-03-21T22:22:59Z</updated>
		<content>&lt;p&gt;I recently heard a podcast where &lt;a href="http://www.davidchappell.com/"&gt;David Chappell&lt;/a&gt; said something that piqued my interest. Paraphrasing, his thinking went something like this.&lt;/p&gt;
&lt;p&gt;Given that...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Business processes support what the business does.&lt;/li&gt;
&lt;li&gt;Those processes that give a competitive advantage are the most important.&lt;/li&gt;
&lt;li&gt;Those important processes are always supported by custom software.&lt;/li&gt;
&lt;li&gt;Custom software is the output of the Application Lifecycle Management (ALM) process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can assume that the success of a company is fundamentally linked to how well it does ALM.&lt;/p&gt;
&lt;p&gt;That's quite a statement. My kneejerk reaction was to take issue with the third point; business processes conferring competitive advantage are always supported by custom software. However, I thought more about it and I've come around some. I still think "always" is an overstatement, but "often" or "usually" might be appropriate.&lt;/p&gt;
&lt;p&gt;It took me more time than I'd care to admit that I missed the point. I was hung up on the wording and dismissed the core idea.&lt;/p&gt;
&lt;h3 id="looking-at-it-from-a-different-angle"&gt;Looking at it from a different angle&lt;/h3&gt;
&lt;p&gt;Instead of David's set of statements, let's think about this assertion.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;A company only writes custom software to gain a competitive advantage. Nothing else justifies the costs and risks associated.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Competitive advantage comes in two main varieties: comparative and differential. Comparative advantage is efficiency. Can you do something at lower cost than your competitors can? If so, you can undercut their prices or have a larger margin. Differential advantage means exactly that: Are you different? Is your company doing something no one else can do? Did you invent a new product? Is your customer service better?&lt;/p&gt;
&lt;p&gt;So how does custom software create the advantage? Here are a few examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You're writing an inventory app that will reduce stock on hand and speed delivery&lt;/li&gt;
&lt;li&gt;You've created an innovative talent recruitment and retention system.&lt;/li&gt;
&lt;li&gt;You're planning a custom application that will streamline a task that currently requires three off-the-shelf products to accomplish.&lt;/li&gt;
&lt;li&gt;You only need a small subset of features from commercial offerings and are writing your own to avoid/reduce cost.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, creating competitive advantage with custom applications makes the advantage harder to copy.&lt;/p&gt;
&lt;p&gt;Custom software is expensive and risky. It takes time to plan, develop, test, deploy, train, support, etc. Therefore, if it isn't giving you a comparative or differential advantage, it isn't worth it.&lt;/p&gt;
&lt;h3 id="why-alm-matters"&gt;Why ALM Matters&lt;/h3&gt;
&lt;p&gt;So custom software is written to confer competitive advantage, but can only confer that advantage if it is delivered, functional, usable, cost-effective, and timely. Given that, organizations with quality ALM will gain more  advantage and be more competitive than those without.&lt;/p&gt;
&lt;p&gt;That's why ALM matters. The success of a company &lt;strong&gt;is&lt;/strong&gt; fundamentally linked to how well it can produce the custom applications that creates an advantage. Failed software projects are failed attempts to better compete.&lt;/p&gt;
&lt;h4 id="references"&gt;References&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.davidchappell.com/"&gt;David Chappell's website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dotnetrocks.com/default.aspx?showNum=956"&gt;.Net Rocks Episode 956&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/test-lab-management-in-windows-azure" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/test-lab-management-in-windows-azure</id>
		<title>Test Lab Management in Windows Azure</title>
		<updated>2014-03-17T09:34:04Z</updated>
		<content>&lt;p&gt;I was fortunate to be involved in some of the development of these tools. Really neat set of solutions.
&lt;img src="http://polarissolutions.com/Blog/image.axd?picture=%2f2014%2f03%2fbeaker.png" class="img-fluid" alt="Lab management beaker image"&gt;&lt;/p&gt;
&lt;p&gt;Polaris Solutions is proud to offer an exclusive set of tools and services that allows testers using &lt;strong&gt;Microsoft Test Manager (MTM)&lt;/strong&gt; and &lt;strong&gt;Lab Center&lt;/strong&gt; to tap into the power and scalability of Windows Azure.&lt;/p&gt;
&lt;p&gt;MTM has proven to be an invaluable tool to many enterprise testing organizations. Unfortunately, the overhead of provisioning and managing virtual machines to support the dynamic needs of testing teams has meant that the powerful self-service infrastructure features of &lt;strong&gt;Lab Center&lt;/strong&gt; have largely been ignored.&lt;/p&gt;
&lt;p&gt;Leveraging the cloud to remove this burden from organizational IT staff is a natural solution.The demand for cloud based testing facilities from our customers has led us to create this unique offering that fully integrates on-premises testers with self-provisioned test infrastructure hosted in &lt;strong&gt;Window Azure&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id="key-benefits"&gt;Key Benefits:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;No on-premises infrastructure necessary&lt;/li&gt;
&lt;li&gt;No dependency on IT operations staff&lt;/li&gt;
&lt;li&gt;Testers start up and shut down their own cloud virtual machines.&lt;/li&gt;
&lt;li&gt;Testers create new cloud virtual machines as needed, optimizing both time and cost&lt;/li&gt;
&lt;li&gt;Testers can leverage a library of pre-built virtual machine images&lt;/li&gt;
&lt;li&gt;Testers can provision new virtual machines from scratch - testing agents will automatically get installed and connected to your test controllers&lt;/li&gt;
&lt;li&gt;Lab Center sees cloud virtual machines as standard domain network machines&lt;/li&gt;
&lt;li&gt;Available today!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Contact &lt;a href="http://polarissolutions.com/Contact"&gt;Polaris Solutions&lt;/a&gt; to learn more about this powerful solution.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://polarissolutions.com/Blog/post/2014/03/17/Test-Lab-Management-in-Windows-Azure.aspx"&gt;(Originally posted here)&lt;/a&gt;&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/automatic-web-deployment-with-tfs-team-build" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/automatic-web-deployment-with-tfs-team-build</id>
		<title>Automatic Web Deployment with TFS Team Build</title>
		<updated>2014-02-28T18:59:04Z</updated>
		<content>&lt;p&gt;If I have to do something three times, it gets automated. The first time I'm just figuring out how to make it work. The second time ensures I know the process and can repeat it without all the exploration. The third time it gets automated and I can stop thinking about it.&lt;/p&gt;
&lt;p&gt;Everytime I touch something, there is the chance for error. An automated process should be perfectly repeatable. Once you get it just right, you can back away and leave it alone to run happily.&lt;/p&gt;
&lt;p&gt;If someone from your team has to manually deploy your application, there is a better way.&lt;/p&gt;
&lt;p&gt;In the past, we could &lt;a href="http://chriskadel.com/2013/03/using-tfs-to-build-and-deploy-during-the-build-process-with-ms-deploy/"&gt;Publish with MS Deploy&lt;/a&gt;. It simplified things, but you still had some hurdles to jump. You needed to edit your projects manually and add build configurations for each environment. This is still a valid means of automating deployment in your team build, but it is more painful than necessary.&lt;/p&gt;
&lt;h2 id="tfs-team-build"&gt;TFS Team Build&lt;/h2&gt;
&lt;p&gt;Microsoft has a build system as part of the Team Foundation set of tools. The on-premise version is called &lt;a href="http://msdn.microsoft.com/en-us/vstudio/ff637362.aspx"&gt;Team Foundation Server&lt;/a&gt;, or there is an "in the cloud" service called &lt;a href="http://www.visualstudio.com/products/visual-studio-online-overview-vs"&gt;Visual Studio Online&lt;/a&gt;. Both flavors offer build capabilities, which I'll refer to jointly as TFS Team Build.&lt;/p&gt;
&lt;p&gt;TFS Team Build offers a lot of power and flexibility, but we can leverage the &lt;a href="http://awaitwisdom.com/intro-to-web-publish-profiles/"&gt;publish profiles&lt;/a&gt; I introduced earlier to deploy a website or web app with just a couple of parameters.&lt;/p&gt;
&lt;h3 id="create-a-build-definition"&gt;Create a build definition&lt;/h3&gt;
&lt;p&gt;Creating a TFS Team Build definition is pretty simple. Here is an extremely quick run through with just the bare minimum so we can get to the deployment part.
1. From the Team Explorer, go the the Builds tab (&lt;code&gt;Ctrl+0, B&lt;/code&gt;) and click "New Build Definition".
2. On the General tab, give your build a name.
&lt;img src="../assets/img/2014/Mar/Build_General_Tab.PNG" class="img-fluid" alt="TFS Build Definition General Tab"&gt;
3. On the Source Settings tab, select the source control folder that has your solution/web project.
4. On the Process tab, pick your Build Process template (I'm using "TfvcTemplate.12.xaml". Select your project to build.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is the important part&lt;/strong&gt;. Still on the Process tab, drop down to the MSBuild Arguments line (maybe be hidden under an Advanced toggle).  The exact location may vary according to your Build Process Template.&lt;/p&gt;
&lt;p&gt;Add &lt;code&gt;/p:DeployOnBuild=true;PublishProfile=&amp;lt;Publish Profile Name&amp;gt;&lt;/code&gt;. The Publish Profile Name does NOT include the .pubxml.&lt;/p&gt;
&lt;p&gt;Here's what mine looked like
&lt;img src="../assets/img/2014/Mar/Build_Process_Tab.PNG" class="img-fluid" alt="TFS Build Definition Process Tab"&gt;&lt;/p&gt;
&lt;p&gt;That's it! A very simple build definition will get the job done.&lt;/p&gt;
&lt;h2 id="web-publish-series"&gt;Web Publish Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/publish-profile-config-transform/"&gt;Config transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/publishing-website-projects"&gt;Publishing Web Site Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/automatic-web-deployment-with-tfs-team-build"&gt;Automatic deployment with TFS Team Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set up your web server for web deployment.&lt;/li&gt;
&lt;li&gt;Using publishsettings files to publish to Azure (and other hosting providers)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://chriskadel.com/2013/03/using-tfs-to-build-and-deploy-during-the-build-process-with-ms-deploy/"&gt;Publishing with MS Deploy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/vstudio/ff637362.aspx"&gt;Microsoft Team Foundation Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.visualstudio.com/products/visual-studio-online-overview-vs"&gt;Visual Studio Online&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/intro-to-web-publish-profiles/"&gt;Intro to web publish profiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/publish-profile-config-transform/"&gt;Web.config transforms with Publish Profiles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/polaris-solutions-is-a-gold-sponsor-for-agile-gravy-stl-2014" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/polaris-solutions-is-a-gold-sponsor-for-agile-gravy-stl-2014</id>
		<title>Polaris Solutions is a Gold Sponsor for Agile Gravy STL 2014</title>
		<updated>2014-02-28T17:01:31Z</updated>
		<content>&lt;p&gt;We’re proud to announce that we just signed on as a Gold sponsor for the first annual &lt;a href="http://agilegravy.com/"&gt;Agile Gravy St. Louis&lt;/a&gt; conference – a rich &amp;amp; savory 1-day Agile conference experience that’s worth soaking up every last drop. Early bird registration is $99.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2014/Feb/AGLogoSmall1_300x171_1_.png" class="img-fluid" alt=""&gt;&lt;/p&gt;
&lt;p&gt;The event will be held on Thursday, April 10th at the St. Louis Marriott West. Drop by our booth and say HI!&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/merry-christmas" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/merry-christmas</id>
		<title>Merry Christmas!</title>
		<updated>2013-12-25T10:09:44Z</updated>
		<content>&lt;a href="http://www.flickr.com/photos/voxdeix/11369915464/" title="My Snow Angel"&gt;
![My Snow Angel](http://farm8.staticflickr.com/7339/11369915464_8276ab4b94.jpg)&lt;/a&gt;
&lt;p&gt;I hope you have a very merry Christmas and a happy New Year!&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/publish-profile-config-transform" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/publish-profile-config-transform</id>
		<title>Web.Config transforms with Publish Profiles</title>
		<updated>2013-12-23T12:00:00Z</updated>
		<content>&lt;p&gt;When you create a publish profile, you may notice that there is an option to replace the connection string on the Settings tab.
&lt;img src="../assets/img/2013/Dec/PublishSettings.PNG" class="img-fluid" alt="Publish dialog settings tab"&gt;
You can specify a connection string there and it will (optionally) update the destination web.config.&lt;/p&gt;
&lt;p&gt;But what if you have more than connection strings to change? What about &lt;appsettings&gt;? It is a lesser known feature, but publish profiles support config transformations.&lt;/appsettings&gt;&lt;/p&gt;
&lt;p&gt;When you create a new web application, a web.config transforms is added for both default build configurations, Debug and Release.
&lt;img src="../assets/img/2013/Dec/DefaultConfigTransforms.PNG" class="img-fluid" alt="Default web.config transforms"&gt;&lt;/p&gt;
&lt;p&gt;We're going to add another transform that matches the publish profile we setup in that previous post. If you don't have a publish profile setup yet, check out &lt;a href="http://awaitwisdom.com/intro-to-web-publish-profiles/"&gt;my previous post&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="step-1-add-a.config-file"&gt;Step 1: Add a .config file.&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;Edit&amp;gt;&lt;/strong&gt;
There is an even easier way to do this. You can also select "Add Config Transform" from the context menu of the publish profile file (.pubxml file).
&lt;img src="../assets/img/2014/Jan/AddConfigTransform.PNG" class="img-fluid" alt=""&gt;
&lt;strong&gt;&amp;lt;/Edit&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Add a new item to your web project using the Project menu.
&lt;img src="../assets/img/2013/Dec/AddNewItem.PNG" class="img-fluid" alt="Add New Item..."&gt;
Select "Web Configuration File" and name it "Web.&lt;publish profile="" name=""&gt;.config". My profile is named "Dev", so my file is named "Web.Dev.config".
&lt;img src="../assets/img/2013/Dec/AddNewConfig.PNG" class="img-fluid" alt="new config file"&gt;&lt;/publish&gt;&lt;/p&gt;
&lt;h2 id="step-2-complete-the-config-transformation"&gt;Step 2: Complete the config transformation&lt;/h2&gt;
&lt;p&gt;You need to add the document transform namespace to your new config file. This goes on the configuration root element and will look like this. &lt;code&gt;&amp;lt;configuration xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform"&amp;gt;&lt;/code&gt;. With that complete, add the rest of your transformation. In my case, I want to remove the debug compilation attribute and change an appSetting.
&lt;img src="../assets/img/2013/Dec/web_dev_config.png" class="img-fluid" alt="web.dev.config"&gt;&lt;/p&gt;
&lt;h2 id="step-3-validatepublish"&gt;Step 3: Validate/Publish&lt;/h2&gt;
&lt;p&gt;If you select your new config transform file and right-click to see the context menu, you'll see a "Preview Transform" option, which shows you exactly how this will be applied.
&lt;img src="../assets/img/2013/Dec/TransformPreview.png" class="img-fluid" alt="Web.config transform preview"&gt;&lt;/p&gt;
&lt;p&gt;And because the transform name matches the publish profile, it will be applied during the publish. I published my site and opened the resulting web.config to confirm the changes.
&lt;img src="../assets/img/2013/Dec/TransformedConfig.png" class="img-fluid" alt="Transformed config"&gt;&lt;/p&gt;
&lt;h2 id="extra-credit-properly-nested-config-transforms"&gt;Extra Credit: Properly nested config transforms&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;Edit&amp;gt;&lt;/strong&gt;
If you add your config transformations via the context menu option detailed in the edit above, this may already be done for you. It appears the Web Application Projects will nest the config, but Web Site Projects will not.
&lt;strong&gt;&amp;lt;/Edit&amp;gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is totally unneccesary, but if you're like me, you'd rather the new config transform was nested under the main config with the other transforms.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2013/Dec/NotNested.png" class="img-fluid" alt="Not Nested"&gt;&lt;/p&gt;
&lt;p&gt;To "fix" this, unload your web project and edit the proj file. Find your transform, which should look something like &lt;code&gt;&amp;lt;Content include="Web.Dev.config" /&amp;gt;&lt;/code&gt; and add a child &lt;dependentupon&gt; element pointing to the main config.
&lt;img src="../assets/img/2013/Dec/EditedProject.png" class="img-fluid" alt="Edited project file"&gt;
Reload the application and you'll find it properly nested under the main file.
&lt;img src="../assets/img/2013/Dec/nested.png" class="img-fluid" alt="Properly Nested"&gt;
Much Better!&lt;/dependentupon&gt;&lt;/p&gt;
&lt;h2 id="web-publish-series"&gt;Web Publish Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/publish-profile-config-transform/"&gt;Config transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/publishing-website-projects"&gt;Publishing Web Site Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/automatic-web-deployment-with-tfs-team-build"&gt;Automatic deployment with TFS Team Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set up your web server for web deployment.&lt;/li&gt;
&lt;li&gt;Using publishsettings files to publish to Azure (and other hosting providers)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/dd465326.aspx"&gt;Web.config Transformation Syntax for Web Project Deployment Using Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/intro-to-web-publish-profiles" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/intro-to-web-publish-profiles</id>
		<title>A Quick Introduction to Web Publish Profiles</title>
		<updated>2013-12-20T12:25:17Z</updated>
		<content>&lt;p&gt;Deployment used to be a big hassle. Copy/Paste to UNC folder paths. XCopy in the command line. Batch scripts to string them together. Error prone, brittle, and annoying.&lt;/p&gt;
&lt;p&gt;Deployment has evolved, but I've found a lot of people don't know about Publish Profiles or what they can do these days, so here we go.&lt;/p&gt;
&lt;p&gt;There is a lot of shiny goodness to be had in publish profiles, including publishing web site projects, publishsettings files from hosting providers, and more, which I may cover in future posts. For now, here's a quick introduction to creating profiles. For the purposes of this post, I'll assume you want to use Web Deploy.&lt;/p&gt;
&lt;h3 id="create-a-new-profile"&gt;Create a new profile&lt;/h3&gt;
&lt;p&gt;I've got a vanilla File &amp;gt; New... &amp;gt; Project web application project. You can get to the publish dialog from the Build menu...&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2013/Dec/BuildMenu.PNG" class="img-fluid" alt="build menu publish option"&gt;
or the project context menu...
&lt;img src="../assets/img/2013/Dec/PublishDialog.PNG" class="img-fluid" alt="web application project context menu publish option"&gt;
Which gets you access to the Publish dialog. We're going to start by creating a new publish profile, called "Dev".
&lt;img src="../assets/img/2013/Dec/PublishDialogWindow.PNG" class="img-fluid" alt="Publish Web Dialog - adding a new profile"&gt;&lt;/p&gt;
&lt;h3 id="add-connection-details"&gt;Add connection details&lt;/h3&gt;
&lt;p&gt;&lt;img src="../assets/img/2013/Dec/PublishConnection.PNG" class="img-fluid" alt="Publish connection details"&gt;
For a complete breakdown of the options on this screen, see the references section below. I've selected "Web Deploy" and plugged in the relevant server/site details.&lt;/p&gt;
&lt;h3 id="settings"&gt;Settings&lt;/h3&gt;
&lt;p&gt;In the settings section you can select build configuration and publish options. Note that you can also configure Entity Framework Code First Migrations and connection string replacement here.  We'll come back to that in a future post.&lt;/p&gt;
&lt;p&gt;&lt;img src="../assets/img/2013/Dec/PublishSettings.PNG" class="img-fluid" alt="Publish Settings Tab"&gt;&lt;/p&gt;
&lt;h3 id="previewpublish"&gt;Preview/Publish&lt;/h3&gt;
&lt;p&gt;The Preview tab gives allows you to (optionally) see what would happen if you ran the deployment without changing anything. This is a good way to not only verify the settings, but see exactly what files the deployment sees as needing an update.
&lt;img src="../assets/img/2013/Dec/PublishPreview.PNG" class="img-fluid" alt="Publish Preview tab"&gt;
From here you can also click "Publish" to deploy, or "Close" will prompt you to save the profile.&lt;/p&gt;
&lt;h2 id="project-changes"&gt;Project Changes&lt;/h2&gt;
&lt;p&gt;So what did all this do to your project? If you expand the Properties folder, you'll see a new "PublishProfiles" folder.
&lt;img src="../assets/img/2013/Dec/ProjectChanges.PNG" class="img-fluid" alt="New PublishProfiles folder"&gt;
If you open up that "Dev.pubxml" file, you'll find ordinary XML.
&lt;img src="../assets/img/2013/Dec/pubxml.PNG" class="img-fluid" alt="PubXml Snippet"&gt;
If you're accustomed to MSBuild project syntax, that XML will look familiar.&lt;/p&gt;
&lt;p&gt;Including the publish files in the project means it can be source controlled and everyone uses the same settings. Another dev pulling down this project will have the "Dev" publish settings already setup.&lt;/p&gt;
&lt;h2 id="web-publish-series"&gt;Web Publish Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/publish-profile-config-transform/"&gt;Config transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/publishing-website-projects"&gt;Publishing Web Site Projects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://awaitwisdom.com/automatic-web-deployment-with-tfs-team-build"&gt;Automatic deployment with TFS Team Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Set up your web server for web deployment.&lt;/li&gt;
&lt;li&gt;Using publishsettings files to publish to Azure (and other hosting providers)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/dd394698.aspx"&gt;Web Deployment Overview for Visual Studio and ASP.NET&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://msdn.microsoft.com/en-us/library/dd465337.aspx"&gt;How to: Deploy a Web Project Using One-Click Publish in Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/tfs-workspace-configuration-cache" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/tfs-workspace-configuration-cache</id>
		<title>TFS Workspace configuration cache</title>
		<updated>2013-12-13T15:09:32Z</updated>
		<content>&lt;p&gt;I have a client that recently upgraded their Team Foundation Server 2012 to 2013 and moved to new hardware in the process. Their TFS 2012 instance has been decommissioned and they hit a small workspace snag.&lt;/p&gt;
&lt;p&gt;Developers were able to add the new server without issue, but when they tried to map the new workspace to the same local folders they used with the old workspace, they got an error.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The path &amp;lt;local filepath&amp;gt; is already mapped in workspace &amp;lt;workspace name&amp;gt; [&amp;lt;project collection url&amp;gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="../assets/img/2013/Dec/WorkspaceMapError.PNG" class="img-fluid" alt="Workspace Mapping Error Example"&gt;&lt;/p&gt;
&lt;p&gt;They tried to use &lt;code&gt;tf workspace /delete&lt;/code&gt; to remove the orphaned mapping. Which (correctly) returned that the old server no longer exists.
&lt;img src="../assets/img/2013/Dec/TfWorkspaceDelete.PNG" class="img-fluid" alt="tf workspace /delete screenshot"&gt;&lt;/p&gt;
&lt;p&gt;So what gives? How can a non-existent server hold onto a local location? TFS caches your workspace settings to prevent just this sort of thing. Mapping multiple team projects onto the same local folder is asking for trouble.&lt;/p&gt;
&lt;p&gt;The solution is to add an "s".
&lt;img src="../assets/img/2013/Dec/TfWorkspaces.PNG" class="img-fluid" alt="tf workspaces /?"&gt;
Tf workspace&lt;strong&gt;s&lt;/strong&gt; addresses just this problem and
you can use it to clear out the locally cached information. The various options give the option to remove workspaces surgically&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tf workspaces /remove:MyWorkspace /collection:"http://doesnotexist:8080/tfs/Collection&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;or you can simply scorch the earth and remove the entire local cache.
&lt;code&gt;tf workspaces /remove:*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This tool isn't removing workspace mappings from the Team Foundation Server, just editing out your local cache, so either is fine.&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/st-louis-days-of-net-slides" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/st-louis-days-of-net-slides</id>
		<title>St. Louis Days of .NET Slides</title>
		<updated>2013-11-16T12:00:00Z</updated>
		<content>&lt;p&gt;Thanks to everyone who attended my talks this weekend. The slides for my &lt;a href="http://www.stldodn.com/2013/speakers/josh-gillespie"&gt;STLDODN talks&lt;/a&gt; are up on &lt;a href="http://www.slideshare.net/JoshGillespie2"&gt;SlideShare&lt;/a&gt; and the demo code is at  &lt;a href="https://github.com/jcgillespie/Demos"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/28316667?rel=0" width="600" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen=""&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt;  &lt;a href="https://www.slideshare.net/JoshGillespie2/dude-i-just-stepped-into-your-code" title="Dude, I just stepped into your code" target="_blank"&gt;Dude, I just stepped into your code&lt;/a&gt;  from &lt;a href="http://www.slideshare.net/JoshGillespie2" target="_blank"&gt;Josh Gillespie&lt;/a&gt; &lt;/div&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/28394764?rel=0" width="600" height="400" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen=""&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;a href="http://www.slideshare.net/JoshGillespie2/stldodn-unit-testingintropics-28394764" title="A Pragmatic Introduction to Unit Testing" target="_blank"&gt;A Pragmatic Introduction to Unit Testing&lt;/a&gt; from &lt;a href="http://www.slideshare.net/JoshGillespie2" target="_blank"&gt;Josh Gillespie&lt;/a&gt; &lt;/div&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/css-px-arent-pixels" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/css-px-arent-pixels</id>
		<title>CSS px aren't pixels</title>
		<updated>2013-11-04T08:14:00Z</updated>
		<content>&lt;p&gt;&lt;a href="http://inamidst.com/stuff/notes/csspx"&gt;This&lt;/a&gt; is  fascinating. Px is an angular measurement, convertible from radians.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;The moon from earth is about 24.3px wide, for example. The Eiffel Tower from a mile away is about 550.5px tall. That means that when you do “{ width: 24.3px }” in CSS 2.1, you're making something as wide as the moon looks to be.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;All these years of web slinging and I always thought it meant "pixels".&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
	<entry>
		<link href="https://blog.awaitwisdom.com/posts/stldodn-2013" />
		<link rel="enclosure" type="image" href="https://blog.awaitwisdom.com/assets/img/Cursor.jpg" />
		<id>https://blog.awaitwisdom.com/posts/stldodn-2013</id>
		<title>St. Louis Days of .NET 2013</title>
		<updated>2013-10-27T07:28:00Z</updated>
		<content>&lt;p&gt;St. Louis Days of .NET (STLDODN) 2013 is fast approaching. &lt;a href="http://polarissolutions.com"&gt;Polaris Solutions&lt;/a&gt; is a &lt;a href=""&gt;sponsor&lt;/a&gt; this year and I'll be presenting there with two of my colleagues.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tfswhisperer.com/"&gt;Angela Dugan&lt;/a&gt; is presenting &lt;a href="http://www.stldodn.com/2013/presentation-agile-testing-in-a-waterfall-world"&gt;Agile Testing in a Waterfall World&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.notsotrivial.net/"&gt;Clint Edmonson&lt;/a&gt; will present an &lt;a href="http://www.stldodn.com/2013/application-architecture-jumpstart"&gt;Application Architecture Jumpstart&lt;/a&gt; and &lt;a href="http://www.stldodn.com/2013/advanced-oop---laws-principles-idioms"&gt;Advanced OOP - Laws, Principles, Idioms&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm going to be walking through &lt;a href="http://www.stldodn.com/2013/a-pragmatic-intro-to-unit-testing"&gt;A Pragmatic Intro to Unit Testing&lt;/a&gt;. Then I'll have some fun talking about code smells and refactoring patterns with  &lt;a href="http://www.stldodn.com/2013/dude-i-just-stepped-into-your-code"&gt;Dude, I Just Stepped into your Code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So check out &lt;a href="http://www.stldodn.com/2013/what-is-the-day-of-.net"&gt;check out STLDODN&lt;/a&gt; to get signed up and be sure to check us out. The &lt;a href="http://www.stldodn.com/2013/agenda"&gt;detailed agenda&lt;/a&gt; isn't posted yet, but should be available soon.&lt;/p&gt;</content>
		<summary>await Wisdom()</summary>
	</entry>
</feed>