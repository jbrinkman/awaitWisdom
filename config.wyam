FileSystem.InputPaths[0] = "Input";
FileSystem.OutputPath = "Output";
==============

public static class Utilities 
{
    public static string GetTagLink(string tag)
	{
		if(tag.StartsWith("."))
		{
		    tag = tag.Substring(1);
		}
        
		return @"Tags/" + tag.ToLowerInvariant().Replace(' ', '-');
	}
}

--------------
Pipelines.Add("Posts",
	ReadFiles(@"Posts\*.md"),  // Read all markdown files in the "posts" directory
	FrontMatter(Yaml()),  // Load any frontmatter and parse it as YAML markup
	Markdown().EscapeAt(true),  // Render the markdown content
	Concat(
		ReadFiles(@"Posts\*.cshtml").Where(x => Path.GetFileName(x)[0] != '_' && Path.GetFileName(x) != "Index.cshtml"),
		FrontMatter(Yaml())		
	),
	Razor(),  // Compile and render the page template
	Excerpt(),
	WriteFiles(@".html"),  // Write the post file
    Branch(
        OrderBy((d,c)  => d.Get<DateTimeOffset>("Published")).Descending(true),
        Rss(    siteRoot: "http://blog.awaitWisdom.com",
                outputRssFilePath: "feed.rss",
                feedTitle: "await Wisdom()",
                feedDescription: "Just a blog"
            )
            .WithLanguage("en-us")
            .WithPublicationDateMetaKey("Published")
            .WithTitleMetaKey("Title")
            .WithDescriptionMetaKey("Description")
            .WithLinkCustomizer((link) => link.EndsWith("/index.html") ? link.Substring(0, link.IndexOf("/index.html")) : link),
        WriteFiles()
    ),
    Branch(
        Where((d,c) => d.Get<string[]>("Tags", new string[0]).Any() && d.Get<string[]>("Tags").Contains("Tech")),
        OrderBy((d,c)  => d.Get<DateTimeOffset>("Published")).Descending(true),
        Rss(    siteRoot: "http://blog.awaitWisdom.com",
                outputRssFilePath: "techfeed.rss",
                feedTitle: "await Wisdom()",
                feedDescription: "Just a blog"
            )
            .WithLanguage("en-us")
            .WithPublicationDateMetaKey("Published")
            .WithTitleMetaKey("Title")
            .WithDescriptionMetaKey("Description")
            .WithLinkCustomizer((link) => link.EndsWith("/index.html") ? link.Substring(0, link.IndexOf("/index.html")) : link),
        WriteFiles()
    )
);

Pipelines.Add("Content",
    ReadFiles(@"*.md").Where(x => !Path.GetDirectoryName(x).EndsWith(@"Posts")),
	FrontMatter(Yaml()),
	Markdown().EscapeAt(true),
    Concat(
        ReadFiles(@"*.cshtml")
            .Where(x => System.IO.Path.GetFileName(x)[0] != '_' && !Path.GetDirectoryName(x).EndsWith("Posts")),
		FrontMatter(Yaml())		
	),
	Razor(), 
	WriteFiles(@".html")
);

Pipelines.Add("Tags",
	ReadFiles(@"Tags\index.cshtml"),
	FrontMatter(),
	Execute(@ctx.Documents
		.Where(x => x.ContainsKey("Published") && x.ContainsKey("Tags"))
    	.SelectMany(x => x.Get<string[]>("Tags"))
		.Distinct()
		.Select(x => @ctx.GetDocument(@doc, new Dictionary<string, object>()
		{ 
		    { "Title", x },
			{ "Tag", x }
		}))),
	Razor(),
	WriteFiles( Utilities.GetTagLink(@doc.String("Tag")) + ".html")
);

Pipelines.Add("Less",
    ReadFiles("theme.less"),
    Less(),
    WriteFiles(@".css")
);

Pipelines.Add("Resources",
	CopyFiles("*").WithoutExtensions(".cshtml", ".md", ".less")
);